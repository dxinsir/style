/**
 * Minified by jsDelivr using UglifyJS v3.4.4.
 * Original file: /gh/BNDong/Cnblogs-Theme-SimpleMemory@fd45b0b4020297998f66b2531b370035bb1dc2ae/js/loading.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
!
    function() {
        var n = {},
            u = n.util = {},
            s = Array.prototype.concat,
            r = Array.prototype.slice;
        u.bind = function(t, e) {
            var i = r.call(arguments, 2);
            return function() {
                t.apply(e, s.call(i, r.call(arguments)))
            }
        },
            u.extend = function(t, e) {
                for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
            };
        var t = n.SpringSystem = function(t) {
            this._springRegistry = {},
                this._activeSprings = [],
                this.listeners = [],
                this._idleSpringIndices = [],
                this.looper = t || new e,
                this.looper.springSystem = this
        };
        u.extend(t.prototype, {
            _springRegistry: null,
            _isIdle: !0,
            _lastTimeMillis: -1,
            _activeSprings: null,
            listeners: null,
            _idleSpringIndices: null,
            setLooper: function(t) { (this.looper = t).springSystem = this
            },
            createSpring: function(t, e) {
                var i;
                return i = void 0 === t || void 0 === e ? o.DEFAULT_ORIGAMI_SPRING_CONFIG: o.fromOrigamiTensionAndFriction(t, e),
                    this.createSpringWithConfig(i)
            },
            createSpringWithBouncinessAndSpeed: function(t, e) {
                var i;
                return i = void 0 === t || void 0 === e ? o.DEFAULT_ORIGAMI_SPRING_CONFIG: o.fromBouncinessAndSpeed(t, e),
                    this.createSpringWithConfig(i)
            },
            createSpringWithConfig: function(t) {
                var e = new y(this);
                return this.registerSpring(e),
                    e.setSpringConfig(t),
                    e
            },
            getIsIdle: function() {
                return this._isIdle
            },
            getSpringById: function(t) {
                return this._springRegistry[t]
            },
            getAllSprings: function() {
                var t = [];
                for (var e in this._springRegistry) this._springRegistry.hasOwnProperty(e) && t.push(this._springRegistry[e]);
                return t
            },
            registerSpring: function(t) {
                this._springRegistry[t.getId()] = t
            },
            deregisterSpring: function(t) {
                _(this._activeSprings, t),
                    delete this._springRegistry[t.getId()]
            },
            advance: function(t, e) {
                for (; 0 < this._idleSpringIndices.length;) this._idleSpringIndices.pop();
                for (var i = 0,
                         n = this._activeSprings.length; i < n; i++) {
                    var s = this._activeSprings[i];
                    s.systemShouldAdvance() ? s.advance(t / 1e3, e / 1e3) : this._idleSpringIndices.push(this._activeSprings.indexOf(s))
                }
                for (; 0 < this._idleSpringIndices.length;) {
                    var r = this._idleSpringIndices.pop();
                    0 <= r && this._activeSprings.splice(r, 1)
                }
            },
            loop: function(t) {
                var e; - 1 === this._lastTimeMillis && (this._lastTimeMillis = t - 1);
                var i = t - this._lastTimeMillis;
                this._lastTimeMillis = t;
                var n = 0,
                    s = this.listeners.length;
                for (n = 0; n < s; n++)(e = this.listeners[n]).onBeforeIntegrate && e.onBeforeIntegrate(this);
                for (this.advance(t, i), 0 === this._activeSprings.length && (this._isIdle = !0, this._lastTimeMillis = -1), n = 0; n < s; n++)(e = this.listeners[n]).onAfterIntegrate && e.onAfterIntegrate(this);
                this._isIdle || this.looper.run()
            },
            activateSpring: function(t) {
                var e = this._springRegistry[t]; - 1 == this._activeSprings.indexOf(e) && this._activeSprings.push(e),
                this.getIsIdle() && (this._isIdle = !1, this.looper.run())
            },
            addListener: function(t) {
                this.listeners.push(t)
            },
            removeListener: function(t) {
                _(this.listeners, t)
            },
            removeAllListeners: function() {
                this.listeners = []
            }
        });
        var y = n.Spring = function t(e) {
            this._id = "s" + t._ID++,
                this._springSystem = e,
                this.listeners = [],
                this._currentState = new i,
                this._previousState = new i,
                this._tempState = new i
        };
        u.extend(y, {
            _ID: 0,
            MAX_DELTA_TIME_SEC: .064,
            SOLVER_TIMESTEP_SEC: .001
        }),
            u.extend(y.prototype, {
                _id: 0,
                _springConfig: null,
                _overshootClampingEnabled: !1,
                _currentState: null,
                _previousState: null,
                _tempState: null,
                _startValue: 0,
                _endValue: 0,
                _wasAtRest: !0,
                _restSpeedThreshold: .001,
                _displacementFromRestThreshold: .001,
                listeners: null,
                _timeAccumulator: 0,
                _springSystem: null,
                destroy: function() {
                    this.listeners = [],
                        this.frames = [],
                        this._springSystem.deregisterSpring(this)
                },
                getId: function() {
                    return this._id
                },
                setSpringConfig: function(t) {
                    return this._springConfig = t,
                        this
                },
                getSpringConfig: function() {
                    return this._springConfig
                },
                setCurrentValue: function(t, e) {
                    return this._startValue = t,
                        this._currentState.position = t,
                    e || this.setAtRest(),
                        this.notifyPositionUpdated(!1, !1),
                        this
                },
                getStartValue: function() {
                    return this._startValue
                },
                getCurrentValue: function() {
                    return this._currentState.position
                },
                getCurrentDisplacementDistance: function() {
                    return this.getDisplacementDistanceForState(this._currentState)
                },
                getDisplacementDistanceForState: function(t) {
                    return Math.abs(this._endValue - t.position)
                },
                setEndValue: function(t) {
                    if (this._endValue == t && this.isAtRest()) return this;
                    this._startValue = this.getCurrentValue(),
                        this._endValue = t,
                        this._springSystem.activateSpring(this.getId());
                    for (var e = 0,
                             i = this.listeners.length; e < i; e++) {
                        var n = this.listeners[e].onSpringEndStateChange;
                        n && n(this)
                    }
                    return this
                },
                getEndValue: function() {
                    return this._endValue
                },
                setVelocity: function(t) {
                    return t === this._currentState.velocity || (this._currentState.velocity = t, this._springSystem.activateSpring(this.getId())),
                        this
                },
                getVelocity: function() {
                    return this._currentState.velocity
                },
                setRestSpeedThreshold: function(t) {
                    return this._restSpeedThreshold = t,
                        this
                },
                getRestSpeedThreshold: function() {
                    return this._restSpeedThreshold
                },
                setRestDisplacementThreshold: function(t) {
                    this._displacementFromRestThreshold = t
                },
                getRestDisplacementThreshold: function() {
                    return this._displacementFromRestThreshold
                },
                setOvershootClampingEnabled: function(t) {
                    return this._overshootClampingEnabled = t,
                        this
                },
                isOvershootClampingEnabled: function() {
                    return this._overshootClampingEnabled
                },
                isOvershooting: function() {
                    var t = this._startValue,
                        e = this._endValue;
                    return 0 < this._springConfig.tension && (t < e && this.getCurrentValue() > e || e < t && this.getCurrentValue() < e)
                },
                advance: function(t, e) {
                    var i = this.isAtRest();
                    if (!i || !this._wasAtRest) {
                        var n = e;
                        e > y.MAX_DELTA_TIME_SEC && (n = y.MAX_DELTA_TIME_SEC),
                            this._timeAccumulator += n;
                        for (var s, r, o, a, h, u, l, c, p = this._springConfig.tension,
                                 _ = this._springConfig.friction,
                                 g = this._currentState.position,
                                 d = this._currentState.velocity,
                                 f = this._tempState.position,
                                 v = this._tempState.velocity; this._timeAccumulator >= y.SOLVER_TIMESTEP_SEC;) this._timeAccumulator -= y.SOLVER_TIMESTEP_SEC,
                        this._timeAccumulator < y.SOLVER_TIMESTEP_SEC && (this._previousState.position = g, this._previousState.velocity = d),
                            s = d,
                            r = p * (this._endValue - f) - _ * d,
                            f = g + s * y.SOLVER_TIMESTEP_SEC * .5,
                            o = v = d + r * y.SOLVER_TIMESTEP_SEC * .5,
                            a = p * (this._endValue - f) - _ * v,
                            f = g + o * y.SOLVER_TIMESTEP_SEC * .5,
                            h = v = d + a * y.SOLVER_TIMESTEP_SEC * .5,
                            u = p * (this._endValue - f) - _ * v,
                            f = g + h * y.SOLVER_TIMESTEP_SEC * .5,
                            l = v = d + u * y.SOLVER_TIMESTEP_SEC * .5,
                            c = 1 / 6 * (r + 2 * (a + u) + (p * (this._endValue - f) - _ * v)),
                            g += 1 / 6 * (s + 2 * (o + h) + l) * y.SOLVER_TIMESTEP_SEC,
                            d += c * y.SOLVER_TIMESTEP_SEC;
                        this._tempState.position = f,
                            this._tempState.velocity = v,
                            this._currentState.position = g,
                            this._currentState.velocity = d,
                        0 < this._timeAccumulator && this._interpolate(this._timeAccumulator / y.SOLVER_TIMESTEP_SEC),
                        (this.isAtRest() || this._overshootClampingEnabled && this.isOvershooting()) && (0 < this._springConfig.tension ? (this._startValue = this._endValue, this._currentState.position = this._endValue) : (this._endValue = this._currentState.position, this._startValue = this._endValue), this.setVelocity(0), i = !0);
                        var S = !1;
                        this._wasAtRest && (S = !(this._wasAtRest = !1));
                        var m = !1;
                        i && (m = this._wasAtRest = !0),
                            this.notifyPositionUpdated(S, m)
                    }
                },
                notifyPositionUpdated: function(t, e) {
                    for (var i = 0,
                             n = this.listeners.length; i < n; i++) {
                        var s = this.listeners[i];
                        t && s.onSpringActivate && s.onSpringActivate(this),
                        s.onSpringUpdate && s.onSpringUpdate(this),
                        e && s.onSpringAtRest && s.onSpringAtRest(this)
                    }
                },
                systemShouldAdvance: function() {
                    return ! this.isAtRest() || !this.wasAtRest()
                },
                wasAtRest: function() {
                    return this._wasAtRest
                },
                isAtRest: function() {
                    return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (this.getDisplacementDistanceForState(this._currentState) <= this._displacementFromRestThreshold || 0 === this._springConfig.tension)
                },
                setAtRest: function() {
                    return this._endValue = this._currentState.position,
                        this._tempState.position = this._currentState.position,
                        this._currentState.velocity = 0,
                        this
                },
                _interpolate: function(t) {
                    this._currentState.position = this._currentState.position * t + this._previousState.position * (1 - t),
                        this._currentState.velocity = this._currentState.velocity * t + this._previousState.velocity * (1 - t)
                },
                getListeners: function() {
                    return this.listeners
                },
                addListener: function(t) {
                    return this.listeners.push(t),
                        this
                },
                removeListener: function(t) {
                    return _(this.listeners, t),
                        this
                },
                removeAllListeners: function() {
                    return this.listeners = [],
                        this
                },
                currentValueIsApproximately: function(t) {
                    return Math.abs(this.getCurrentValue() - t) <= this.getRestDisplacementThreshold()
                }
            });
        var i = function() {};
        u.extend(i.prototype, {
            position: 0,
            velocity: 0
        });
        var o = n.SpringConfig = function(t, e) {
                this.tension = t,
                    this.friction = e
            },
            e = n.AnimationLooper = function() {
                this.springSystem = null;
                var t = this,
                    e = function() {
                        t.springSystem.loop(Date.now())
                    };
                this.run = function() {
                    u.onFrame(e)
                }
            };
        n.SimulationLooper = function(t) {
            this.springSystem = null;
            var e = 0,
                i = !1;
            t = t || 16.667,
                this.run = function() {
                    if (!i) {
                        for (i = !0; ! this.springSystem.getIsIdle();) this.springSystem.loop(e += t);
                        i = !1
                    }
                }
        },
            n.SteppingSimulationLooper = function(t) {
                this.springSystem = null;
                var e = 0;
                this.run = function() {},
                    this.step = function(t) {
                        this.springSystem.loop(e += t)
                    }
            };
        var a = n.OrigamiValueConverter = {
                tensionFromOrigamiValue: function(t) {
                    return 3.62 * (t - 30) + 194
                },
                origamiValueFromTension: function(t) {
                    return (t - 194) / 3.62 + 30
                },
                frictionFromOrigamiValue: function(t) {
                    return 3 * (t - 8) + 25
                },
                origamiFromFriction: function(t) {
                    return (t - 25) / 3 + 8
                }
            },
            h = n.BouncyConversion = function(t, e) {
                this.bounciness = t,
                    this.speed = e;
                var i = this.normalize(t / 1.7, 0, 20);
                i = this.projectNormal(i, 0, .8);
                var n = this.normalize(e / 1.7, 0, 20);
                this.bouncyTension = this.projectNormal(n, .5, 200),
                    this.bouncyFriction = this.quadraticOutInterpolation(i, this.b3Nobounce(this.bouncyTension), .01)
            };
        u.extend(h.prototype, {
            normalize: function(t, e, i) {
                return (t - e) / (i - e)
            },
            projectNormal: function(t, e, i) {
                return e + t * (i - e)
            },
            linearInterpolation: function(t, e, i) {
                return t * i + (1 - t) * e
            },
            quadraticOutInterpolation: function(t, e, i) {
                return this.linearInterpolation(2 * t - t * t, e, i)
            },
            b3Friction1: function(t) {
                return 7e-4 * Math.pow(t, 3) - .031 * Math.pow(t, 2) + .64 * t + 1.28
            },
            b3Friction2: function(t) {
                return 44e-6 * Math.pow(t, 3) - .006 * Math.pow(t, 2) + .36 * t + 2
            },
            b3Friction3: function(t) {
                return 45e-8 * Math.pow(t, 3) - 332e-6 * Math.pow(t, 2) + .1078 * t + 5.84
            },
            b3Nobounce: function(t) {
                return t <= 18 ? this.b3Friction1(t) : 18 < t && t <= 44 ? this.b3Friction2(t) : this.b3Friction3(t)
            }
        }),
            u.extend(o, {
                fromOrigamiTensionAndFriction: function(t, e) {
                    return new o(a.tensionFromOrigamiValue(t), a.frictionFromOrigamiValue(e))
                },
                fromBouncinessAndSpeed: function(t, e) {
                    var i = new n.BouncyConversion(t, e);
                    return this.fromOrigamiTensionAndFriction(i.bouncyTension, i.bouncyFriction)
                },
                coastingConfigWithOrigamiFriction: function(t) {
                    return new o(0, a.frictionFromOrigamiValue(t))
                }
            }),
            o.DEFAULT_ORIGAMI_SPRING_CONFIG = o.fromOrigamiTensionAndFriction(40, 7),
            u.extend(o.prototype, {
                friction: 0,
                tension: 0
            });
        var l = {};
        u.hexToRGB = function(t) {
            if (l[t]) return l[t];
            3 === (t = t.replace("#", "")).length && (t = t[0] + t[0] + t[1] + t[1] + t[2] + t[2]);
            var e = t.match(/.{2}/g),
                i = {
                    r: parseInt(e[0], 16),
                    g: parseInt(e[1], 16),
                    b: parseInt(e[2], 16)
                };
            return l[t] = i
        },
            u.rgbToHex = function(t, e, i) {
                return t = t.toString(16),
                    e = e.toString(16),
                    i = i.toString(16),
                "#" + (t = t.length < 2 ? "0" + t: t) + (e = e.length < 2 ? "0" + e: e) + (i = i.length < 2 ? "0" + i: i)
            };
        var c, p = n.MathUtil = {
            mapValueInRange: function(t, e, i, n, s) {
                return n + (t - e) / (i - e) * (s - n)
            },
            interpolateColor: function(t, e, i, n, s, r) {
                n = void 0 === n ? 0 : n,
                    s = void 0 === s ? 1 : s,
                    e = u.hexToRGB(e),
                    i = u.hexToRGB(i);
                var o = Math.floor(u.mapValueInRange(t, n, s, e.r, i.r)),
                    a = Math.floor(u.mapValueInRange(t, n, s, e.g, i.g)),
                    h = Math.floor(u.mapValueInRange(t, n, s, e.b, i.b));
                return r ? "rgb(" + o + "," + a + "," + h + ")": u.rgbToHex(o, a, h)
            },
            degreesToRadians: function(t) {
                return t * Math.PI / 180
            },
            radiansToDegrees: function(t) {
                return 180 * t / Math.PI
            }
        };
        function _(t, e) {
            var i = t.indexOf(e); - 1 != i && t.splice(i, 1)
        }
        u.extend(u, p),
        "undefined" != typeof window && (c = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame ||
            function(t) {
                window.setTimeout(t, 1e3 / 60)
            }),
        c || "undefined" == typeof process || "node" !== process.title || (c = setImmediate),
            u.onFrame = function(t) {
                return c(t)
            },
            "undefined" != typeof exports ? u.extend(exports, n) : "undefined" != typeof window && (window.rebound = n)
    } ();
var _createClass = function() {
    function n(t, e) {
        for (var i = 0; i < e.length; i++) {
            var n = e[i];
            n.enumerable = n.enumerable || !1,
                n.configurable = !0,
            "value" in n && (n.writable = !0),
                Object.defineProperty(t, n.key, n)
        }
    }
    return function(t, e, i) {
        return e && n(t.prototype, e),
        i && n(t, i),
            t
    }
} ();
function _classCallCheck(t, e) {
    if (! (t instanceof e)) throw new TypeError("Cannot call a class as a function")
}
var Polygon = function() {
    function s() {
        var t = arguments.length <= 0 || void 0 === arguments[0] ? 100 : arguments[0],
            e = arguments.length <= 1 || void 0 === arguments[1] ? 3 : arguments[1],
            i = arguments.length <= 2 || void 0 === arguments[2] ? 0 : arguments[2],
            n = arguments[3];
        _classCallCheck(this, s),
            this._radius = t,
            this._sides = e,
            this._depth = i,
            this._colors = n,
            this._x = 0,
            this._y = 0,
            this.rotation = 0,
            this.scale = 1,
            this.points = this._getRegularPolygonPoints()
    }
    return _createClass(s, [{
        key: "_getRegularPolygonPoints",
        value: function() {
            for (var t = [], e = 0; e < this._sides;) {
                var i = -this._radius * Math.sin(2 * e * Math.PI / this._sides),
                    n = this._radius * Math.cos(2 * e * Math.PI / this._sides);
                t.push({
                    x: i,
                    y: n
                }),
                    e++
            }
            return t
        }
    },
        {
            key: "_getInscribedPoints",
            value: function(r, o) {
                var a = this,
                    h = [];
                return r.forEach(function(t, e) {
                    var i = t,
                        n = r[e + 1];
                    n || (n = r[0]);
                    var s = a._getInterpolatedPoint(i, n, o);
                    h.push(s)
                }),
                    h
            }
        },
        {
            key: "_getInterpolatedPoint",
            value: function(t, e, i) {
                var n = t.x,
                    s = t.y;
                return {
                    x: n + (e.x - n) * i,
                    y: s + (e.y - s) * i
                }
            }
        },
        {
            key: "_getUpdatedChildren",
            value: function(t) {
                for (var e = [], i = 0; i < this._depth; i++) {
                    var n = e[i - 1] || this.points,
                        s = this._getInscribedPoints(n, t);
                    e.push(s)
                }
                return e
            }
        },
        {
            key: "renderChildren",
            value: function(h, t) {
                var u = this,
                    l = this._getUpdatedChildren(t);
                l.forEach(function(t, e) {
                    h.beginPath(),
                        t.forEach(function(t) {
                            return h.lineTo(t.x, t.y)
                        }),
                        h.closePath();
                    var i = u._colors.stroke,
                        n = u._colors.child;
                    if (i && (h.strokeStyle = i, h.stroke()), n) {
                        var s = rebound.util.hexToRGB(n),
                            r = 1 / l.length,
                            o = r + r * e,
                            a = "rgba(" + s.r + ", " + s.g + ", " + s.b + ", " + o + ")";
                        h.fillStyle = a,
                            h.shadowColor = "rgba(0,0,0, 0.1)",
                            h.shadowBlur = 10,
                            h.shadowOffsetX = 0,
                            h.shadowOffsetY = 0,
                            h.fill()
                    }
                })
            }
        },
        {
            key: "render",
            value: function(e) {
                e.save(),
                    e.translate(this._x, this._y),
                0 !== this.rotation && e.rotate(rebound.MathUtil.degreesToRadians(this.rotation)),
                1 !== this.scale && e.scale(this.scale, this.scale),
                    e.beginPath(),
                    this.points.forEach(function(t) {
                        return e.lineTo(t.x, t.y)
                    }),
                    e.closePath();
                var t = this._colors.stroke,
                    i = this._colors.base;
                t && (e.strokeStyle = t, e.stroke()),
                i && (e.fillStyle = i, e.fill()),
                    e.restore()
            }
        }]),
        s
} ();
_createClass = function() {
    function n(t, e) {
        for (var i = 0; i < e.length; i++) {
            var n = e[i];
            n.enumerable = n.enumerable || !1,
                n.configurable = !0,
            "value" in n && (n.writable = !0),
                Object.defineProperty(t, n.key, n)
        }
    }
    return function(t, e, i) {
        return e && n(t.prototype, e),
        i && n(t, i),
            t
    }
} ();
function _classCallCheck(t, e) {
    if (! (t instanceof e)) throw new TypeError("Cannot call a class as a function")
}
var Spinner = function() {
        function h(t) {
            _classCallCheck(this, h);
            t.id;
            var e = t.radius,
                i = t.sides,
                n = t.depth,
                s = t.colors,
                r = t.alwaysForward,
                o = t.restAt,
                a = t.renderBase;
            i < 3 && (console.warn("At least 3 sides required."), i = 3),
                this._canvas = document.createElement("canvas"),
                this._canvas.style.backgroundColor = s.background,
                this._canvas.style.zIndex = 1100,
                this._canvasW = null,
                this._canvasH = null,
                this._canvasOpacity = 1,
                this._centerX = null,
                this._centerY = null,
                this._alwaysForward = r,
                this._restThreshold = o,
                this._renderBase = a,
                this._springRangeLow = 0,
                this._springRangeHigh = this._restThreshold || 1,
                this._basePolygon = new Polygon(e, i, n, s),
                this._progress = 0,
                this._isAutoSpin = null,
                this._isCompleting = null
        }
        return _createClass(h, [{
            key: "init",
            value: function(t, e) {
                this._addCanvas(),
                    this._spring = t,
                    this._addSpringListener(),
                    (this._isAutoSpin = e) ? this._spin() : (this._spring.setEndValue(0), this.render())
            }
        },
            {
                key: "_addCanvas",
                value: function() {
                    document.body.appendChild(this._canvas),
                        this._context = this._canvas.getContext("2d"),
                        this._setCanvasSize()
                }
            },
            {
                key: "_setCanvasSize",
                value: function() {
                    this._canvasW = this._canvas.width = window.innerWidth,
                        this._canvasH = this._canvas.height = window.innerHeight,
                        this._canvas.style.position = "fixed",
                        this._canvas.style.top = 0,
                        this._canvas.style.left = 0,
                        this._centerX = this._canvasW / 2,
                        this._centerY = this._canvasH / 2
                }
            },
            {
                key: "_addSpringListener",
                value: function() {
                    var s = this;
                    this._spring.addListener({
                        onSpringUpdate: function(t) {
                            var e = t.getCurrentValue(),
                                i = s._springRangeLow,
                                n = s._springRangeHigh;
                            e = rebound.MathUtil.mapValueInRange(e, 0, 1, i, n),
                                s.render(e)
                        }
                    })
                }
            },
            {
                key: "setComplete",
                value: function() {
                    this._isCompleting = !0
                }
            },
            {
                key: "_completeAnimation",
                value: function() {
                    this._canvasOpacity -= .1,
                        this._canvas.style.opacity = this._canvasOpacity,
                    this._canvasOpacity <= 0 && (this._isAutoSpin = !1, this._spring.setAtRest(), this._canvas.style.display = "none", this._canvas.remove())
                }
            },
            {
                key: "_spin",
                value: function() {
                    if (this._alwaysForward) {
                        var t = this._spring.getCurrentValue();
                        this._restThreshold && 1 === t && this._switchSpringRange(),
                        1 === t && this._spring.setCurrentValue(0).setAtRest()
                    }
                    this._spring.setEndValue(1 === this._spring.getCurrentValue() ? 0 : 1)
                }
            },
            {
                key: "_switchSpringRange",
                value: function() {
                    var t = this._restThreshold;
                    this._springRangeLow = this._springRangeLow === t ? 0 : t,
                        this._springRangeHigh = this._springRangeHigh === t ? 1 : t
                }
            },
            {
                key: "render",
                value: function(t) {
                    t && (this._progress = Math.round(1e4 * t) / 1e4),
                    this._isAutoSpin && this._spring.isAtRest() && this._spin(),
                    this._isCompleting && this._completeAnimation(),
                        this._context.clearRect(0, 0, this._canvasW, this._canvasH),
                        this._context.save(),
                        this._context.translate(this._centerX, this._centerY),
                        this._context.lineWidth = 1.5,
                    this._renderBase && this._basePolygon.render(this._context),
                        this._basePolygon.renderChildren(this._context, this._progress),
                        this._context.restore()
                }
            }]),
            h
    } (),
    settings = {
        rebound: {
            tension: 16,
            friction: 5
        },
        spinner: {
            id: "spinner",
            radius: 90,
            sides: 3,
            depth: 4,
            colors: {
                background: "#f0f0f0",
                stroke: "#272633",
                base: null,
                child: "#272633"
            },
            alwaysForward: !0,
            restAt: .5,
            renderBase: !1
        }
    },
    demo = {
        settings: settings,
        spring: null,
        spinner: null,
        initRebound: function() {
            var t = demo.settings.rebound,
                e = new rebound.SpringSystem;
            demo.spring = e.createSpring(t.tension, t.friction)
        },
        initSpinner: function() {
            var t = demo.settings.spinner;
            demo.spinner = new Spinner(t)
        },
        init: function() {
            demo.initRebound(),
                demo.initSpinner(),
                demo.spinner.init(demo.spring, !0),
                setTimeout(function() {
                        demo.spinner.setComplete()
                    },
                    6e3)
        },
        loadSomething: function() {
            var t = new XMLHttpRequest;
            t.addEventListener("progress",
                function(t) {
                    if (t.lengthComputable) {
                        var e = Math.ceil(t.loaded / t.total * 100);
                        console.log("ajax loding percent", e),
                            demo.spring.setEndValue(.01 * e)
                    }
                }),
                t.addEventListener("load",
                    function(t) {
                        demo.spinner.setComplete()
                    }),
                t.open("GET", "/img/something.jpg"),
                t.send()
        }
    };
//# sourceMappingURL=/sm/b5949434079918b170e20c0928142ae1fbc24ddba33618324c805262fa4de202.map
